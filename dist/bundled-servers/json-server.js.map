{
  "version": 3,
  "sources": ["../../src/bundled-servers/json-server.ts"],
  "sourcesContent": ["/**\n * Bundled JSON Language Server\n * \n * Self-contained JSON language server that can be bundled with LSP-Toy\n * instead of requiring external vscode-json-languageserver installation.\n */\n\nimport {\n  createConnection,\n  TextDocuments,\n  ProposedFeatures,\n  InitializeParams,\n  DidChangeConfigurationNotification,\n  CompletionItem,\n  CompletionItemKind,\n  TextDocumentPositionParams,\n  TextDocumentSyncKind,\n  InitializeResult,\n  HoverParams,\n  Hover,\n  MarkupKind,\n  DiagnosticSeverity,\n  Diagnostic\n} from 'vscode-languageserver/node';\nimport { TextDocument } from 'vscode-languageserver-textdocument';\n\nclass BundledJSONServer {\n  private connection = createConnection(ProposedFeatures.all);\n  private documents = new TextDocuments(TextDocument);\n  private hasConfigurationCapability = false;\n\n  constructor() {\n    this.setupHandlers();\n  }\n\n  private setupHandlers() {\n    this.connection.onInitialize((params: InitializeParams) => {\n      const capabilities = params.capabilities;\n      \n      this.hasConfigurationCapability = !!(\n        capabilities.workspace && !!capabilities.workspace.configuration\n      );\n\n      const result: InitializeResult = {\n        capabilities: {\n          textDocumentSync: TextDocumentSyncKind.Incremental,\n          completionProvider: {\n            resolveProvider: false,\n            triggerCharacters: ['\"', ':', ',', '{', '[']\n          },\n          hoverProvider: true,\n          documentSymbolProvider: true\n        }\n      };\n\n      return result;\n    });\n\n    this.connection.onInitialized(() => {\n      if (this.hasConfigurationCapability) {\n        this.connection.client.register(DidChangeConfigurationNotification.type, undefined);\n      }\n    });\n\n    this.connection.onCompletion(this.handleCompletion.bind(this));\n    this.connection.onHover(this.handleHover.bind(this));\n\n    this.documents.onDidChangeContent(change => {\n      this.validateDocument(change.document);\n    });\n\n    this.documents.listen(this.connection);\n    this.connection.listen();\n  }\n\n  private validateDocument(document: TextDocument) {\n    const text = document.getText();\n    const diagnostics: Diagnostic[] = [];\n\n    try {\n      JSON.parse(text);\n      // Valid JSON - no diagnostics\n    } catch (error) {\n      // Parse error\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const match = errorMessage.match(/position (\\d+)/);\n      const position = match ? parseInt(match[1]) : 0;\n      const documentPosition = document.positionAt(position);\n      \n      diagnostics.push({\n        severity: DiagnosticSeverity.Error,\n        range: {\n          start: documentPosition,\n          end: { line: documentPosition.line, character: documentPosition.character + 1 }\n        },\n        message: `JSON syntax error: ${errorMessage}`,\n        source: 'json'\n      });\n    }\n\n    this.connection.sendDiagnostics({\n      uri: document.uri,\n      diagnostics\n    });\n  }\n\n  private handleCompletion(textDocumentPosition: TextDocumentPositionParams): CompletionItem[] {\n    const document = this.documents.get(textDocumentPosition.textDocument.uri);\n    if (!document) {\n      return [];\n    }\n\n    const text = document.getText();\n    const offset = document.offsetAt(textDocumentPosition.position);\n    const beforeCursor = text.substring(0, offset);\n    \n    // Simple completion logic\n    const completions: CompletionItem[] = [];\n\n    // If we're after a quote, suggest property names\n    if (beforeCursor.endsWith('\"') || beforeCursor.match(/\"[^\"]*$/)) {\n      completions.push(\n        {\n          label: 'name',\n          kind: CompletionItemKind.Property,\n          insertText: 'name\": \"'\n        },\n        {\n          label: 'version',\n          kind: CompletionItemKind.Property,\n          insertText: 'version\": \"'\n        },\n        {\n          label: 'description',\n          kind: CompletionItemKind.Property,\n          insertText: 'description\": \"'\n        },\n        {\n          label: 'type',\n          kind: CompletionItemKind.Property,\n          insertText: 'type\": \"'\n        }\n      );\n    }\n\n    // If we're after a colon, suggest values\n    if (beforeCursor.match(/:\\s*$/)) {\n      completions.push(\n        {\n          label: 'true',\n          kind: CompletionItemKind.Value,\n          insertText: 'true'\n        },\n        {\n          label: 'false',\n          kind: CompletionItemKind.Value,\n          insertText: 'false'\n        },\n        {\n          label: 'null',\n          kind: CompletionItemKind.Value,\n          insertText: 'null'\n        }\n      );\n    }\n\n    return completions;\n  }\n\n  private handleHover(params: HoverParams): Hover | null {\n    const document = this.documents.get(params.textDocument.uri);\n    if (!document) {\n      return null;\n    }\n\n    const text = document.getText();\n    const offset = document.offsetAt(params.position);\n    \n    // Find the word at cursor position\n    const wordRange = this.getWordRangeAtPosition(document, params.position);\n    if (!wordRange) {\n      return null;\n    }\n\n    const word = text.substring(\n      document.offsetAt(wordRange.start),\n      document.offsetAt(wordRange.end)\n    );\n\n    // Provide hover information for JSON keywords\n    const hoverInfo: Record<string, string> = {\n      'true': 'Boolean value: true',\n      'false': 'Boolean value: false',\n      'null': 'Represents null value',\n      'name': 'Package name property',\n      'version': 'Version identifier',\n      'description': 'Package description'\n    };\n\n    const info = hoverInfo[word];\n    if (info) {\n      return {\n        contents: {\n          kind: MarkupKind.Markdown,\n          value: `**${word}**\\n\\n${info}`\n        },\n        range: wordRange\n      };\n    }\n\n    return null;\n  }\n\n  private getWordRangeAtPosition(document: TextDocument, position: any) {\n    const text = document.getText();\n    const offset = document.offsetAt(position);\n    \n    let start = offset;\n    let end = offset;\n    \n    // Find word boundaries\n    while (start > 0 && /\\w/.test(text[start - 1])) {\n      start--;\n    }\n    \n    while (end < text.length && /\\w/.test(text[end])) {\n      end++;\n    }\n    \n    if (start === end) {\n      return null;\n    }\n    \n    return {\n      start: document.positionAt(start),\n      end: document.positionAt(end)\n    };\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  new BundledJSONServer();\n}\n\nexport { BundledJSONServer };"],
  "mappings": "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",
  "names": []
}
