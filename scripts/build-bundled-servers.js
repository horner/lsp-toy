#!/usr/bin/env node

/**
 * Build script for bundled language servers
 * 
 * Creates self-contained JavaScript bundles of language servers
 * that can be distributed with LSP-Toy instead of requiring
 * external language server installations.
 */

const esbuild = require('esbuild');
const fs = require('fs');
const path = require('path');

const BUNDLED_SERVERS = [
  {
    name: 'typescript-server',
    entryPoint: './src/bundled-servers/typescript-server.ts',
    external: [
      // Keep these as external dependencies
      'vscode-languageserver',
      'vscode-languageserver-textdocument',
    ]
  },
  {
    name: 'json-server',
    entryPoint: './src/bundled-servers/json-server.ts',
    external: [
      'vscode-languageserver',
      'vscode-languageserver-textdocument',
    ]
  }
];

async function buildServer(config) {
  const outDir = './dist/bundled-servers';
  const outFile = path.join(outDir, `${config.name}.js`);
  
  console.log(`📦 Building ${config.name}...`);
  
  try {
    await esbuild.build({
      entryPoints: [config.entryPoint],
      bundle: true,
      platform: 'node',
      target: 'node16',
      format: 'cjs',
      outfile: outFile,
      external: config.external || [],
      sourcemap: true,
      minify: false, // Keep readable for debugging
      metafile: true,
      define: {
        // Ensure we're in Node.js environment
        'process.env.NODE_ENV': '"production"'
      },
      banner: {
        js: '#!/usr/bin/env node\n// Bundled Language Server - Generated by LSP-Toy'
      }
    });
    
    // Make executable
    fs.chmodSync(outFile, 0o755);
    
    console.log(`✅ Built ${config.name} -> ${outFile}`);
    
    // Show bundle size
    const stats = fs.statSync(outFile);
    const sizeKB = Math.round(stats.size / 1024);
    console.log(`   Size: ${sizeKB}KB`);
    
    return true;
  } catch (error) {
    console.error(`❌ Failed to build ${config.name}:`);
    console.error(error.message);
    return false;
  }
}

async function main() {
  console.log('🚀 Building bundled language servers...\n');
  
  // Ensure output directory exists
  const outDir = './dist/bundled-servers';
  if (!fs.existsSync('./dist')) {
    fs.mkdirSync('./dist');
  }
  if (!fs.existsSync(outDir)) {
    fs.mkdirSync(outDir);
  }
  
  // Build all servers
  const results = await Promise.all(
    BUNDLED_SERVERS.map(config => buildServer(config))
  );
  
  const successCount = results.filter(Boolean).length;
  const totalCount = BUNDLED_SERVERS.length;
  
  console.log(`\n📊 Build Results: ${successCount}/${totalCount} servers built successfully`);
  
  if (successCount === totalCount) {
    console.log('🎉 All bundled servers built successfully!');
    console.log('\nNext steps:');
    console.log('  1. Update embedded registry to use bundled servers');
    console.log('  2. Test with: node dist/bundled-servers/typescript-server.js');
    console.log('  3. Update installation documentation');
  } else {
    console.log('⚠️  Some servers failed to build. Check errors above.');
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch(error => {
    console.error('Build failed:', error);
    process.exit(1);
  });
}

module.exports = { buildServer, BUNDLED_SERVERS };